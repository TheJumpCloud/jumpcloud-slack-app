AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  JumpCloudApiKey:
    Type: String
    NoEcho: true
    AllowedPattern: \b[a-z0-9]{40}\b
  OrganizationID:
    Type: String
    Default: ""
    Description: "Optional, only required for MTP JumpCloud API keys."
  SlackSigningString:
    Type: String
    NoEcho: true
  SlackAPIToken:
    Type: String
    NoEcho: true

Metadata:
  AWS::ServerlessRepo::Application:
    Name: JumpCloud-SlackApp
    Description: This Serverless Application can be used to deploy all the pieces in AWS required to configure the JumpCloud App for Slack.
    Author: JumpCloud Solutions Architecture
    SemanticVersion: 1.0.0
    HomePageUrl: https://git.io/JtWv1
    SourceCodeUrl: https://git.io/JtWv1
    LicenseURL: LICENSE

Resources:
    SlackAppRole:
        Type: AWS::IAM::Role
        Properties: 
          Description: A role for use in the JumpCloud Slack App
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AWSLambdaExecute
          Policies:
            - PolicyName: CloudWatchMetrics
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - 'cloudwatch:PutMetricData'
                    Resource: '*'
            - PolicyName: LambdaSQS
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                    - 'sqs:*'
                    Resource: !GetAtt SlackAppSQS.Arn
    SlackAppCmk:
        Type: AWS::KMS::Key
        Properties:
            Description: An Symmetric CMK for use in the JumpCloud Slack App
            KeyPolicy:
                Version: '2012-10-17'
                Id: key-default-1
                Statement:
                  - Sid: Enable IAM User Permissions
                    Effect: Allow
                    Principal:
                        AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
                    Action: kms:*
                    Resource: '*'
                  - Sid: Allow use of the key
                    Effect: Allow
                    Principal:
                        AWS: !GetAtt SlackAppRole.Arn
                    Action:
                    - kms:DescribeKey
                    - kms:Encrypt
                    - kms:Decrypt
                    - kms:ReEncrypt*
                    - kms:GenerateDataKey
                    - kms:GenerateDataKeyWithoutPlaintext
                    Resource: '*'
    SlackAppSecrets:
        Type: AWS::SecretsManager::Secret
        Properties:
            Description: Secrets used by the JumpCloud SlackApp
            SecretString: !Sub '{"JcApiKey": "${JumpCloudApiKey}", "SlackSigningString": "${SlackSigningString}", "SlackApiToken": "${SlackAPIToken}"}'
    SecretsResourcePolicy:
        Type: AWS::SecretsManager::ResourcePolicy
        Properties:
          SecretId: !Ref SlackAppSecrets
          ResourcePolicy:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal: 
                AWS: !GetAtt SlackAppRole.Arn
              Action: secretsmanager:GetSecretValue
              Resource: "*"
    SlackAppParentFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: slack-parent.zip
            Handler: slack-parent::slack_parent.Bootstrap::ExecuteFunction
            MemorySize: 512
            Timeout: 10
            Runtime: dotnetcore3.1
            Role: !GetAtt SlackAppRole.Arn
            Environment:
                Variables:
                    SQSQueueUrl: !Ref SlackAppSQS
    SlackAppChildFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: slack-child.zip
            Handler: slack-child::slack_child.Bootstrap::ExecuteFunction
            MemorySize: 512
            Timeout: 180
            Runtime: dotnetcore3.1
            Role: !GetAtt SlackAppRole.Arn
            KmsKeyArn: !GetAtt SlackAppCmk.Arn
            Environment:
                Variables:
                    SecretsArn: !Ref SlackAppSecrets
                    JcOrgId: !Sub ${OrganizationID}
                    JcSlackApp: "AWS"
    SlackAppSQS:
        Type: AWS::SQS::Queue
        Properties:
            ReceiveMessageWaitTimeSeconds: 0
            MessageRetentionPeriod: 120
            VisibilityTimeout: 360
    SlackAppAPI:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: SlackAppAPI
            Body:
                swagger: '2.0'
                info:
                  description: JumpCloud App for Slack
                  title: SlackApp
                schemes:
                - https
                paths:
                  '/jc':
                    post:
                      summary: SlackApp
                      consumes:
                      - application/x-www-form-urlencoded
                      produces:
                      - application/json
                      responses:
                        '200':
                          description: Successful operation
                          schema:
                            "$ref": "#/definitions/Empty"
                      x-amazon-apigateway-integration:
                        responses:
                          default:
                            statusCode: '200'
                        uri: 
                          Fn::Sub:
                          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
                          - lambdaArn: !GetAtt SlackAppParentFunction.Arn
                        requestTemplates:
                          application/x-www-form-urlencoded: "{\n  \"postBody\" : $input.json(\"$\"),\n  \"headers\": {\n    #foreach($param in $input.params().header.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\n    #end\n  }\n}"
                        passthroughBehavior: when_no_match
                        httpMethod: POST
                        contentHandling: CONVERT_TO_TEXT
                        type: aws
                definitions:
                  Empty:
                    type: object
    SlackAppDeployment: 
        Type: AWS::ApiGateway::Deployment
        Properties: 
            RestApiId: !Ref SlackAppAPI
            StageName: live
    LambdaPermissions:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref SlackAppParentFunction
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlackAppAPI}/*/POST/*
    LambdaFunctionEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        Properties:
            BatchSize: 1
            Enabled: true
            EventSourceArn: !GetAtt SlackAppSQS.Arn
            FunctionName: !GetAtt SlackAppChildFunction.Arn
